{
    "pipes": [],
    "interfaces": [
        {
            "name": "Athlete",
            "id": "interface-Athlete-39023323b35d2180cbb331bc80b095e4",
            "file": "src/app/models/athlete.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import firebase from 'firebase';\nimport Timestamp = firebase.firestore.Timestamp;\n\nexport interface Athlete {\n    id?: string;\n    firstName: string;\n    lastName: string;\n    gender: string;\n    gradYear: number;\n    active?: boolean;\n    primaryPhone?: string;\n    secondaryPhone?: string;\n    email?: string;\n    uniformBottomSize?: string;\n    uniformTopSize?: string;\n    warmUpTopSize?: string;\n    bagNumber?: number;\n    profileUrl?: string;\n    tshirtSize?: string;\n    isTeamLeader?: boolean;\n    teamLeader?: string;\n    physicalCurrent?: boolean;\n    physicalExpiryDate?: Timestamp;\n    bio?: string;\n    notes?: string;\n}\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "bagNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "bio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "gradYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isTeamLeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "physicalCurrent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "physicalExpiryDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Timestamp",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "primaryPhone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "profileUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "secondaryPhone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "teamLeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "tshirtSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "uniformBottomSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "uniformTopSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "warmUpTopSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "Meet",
            "id": "interface-Meet-2bd53a4bfd7c25808f40caabee9b6d92",
            "file": "src/app/models/meet.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Meet {\n    id?: string;\n    archived: boolean;\n    hostSchool: string;\n    meetName: string;\n    locationUrl?: string;\n    address: string;\n    city: string;\n    state: string;\n    zip: number;\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "archived",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "hostSchool",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "locationUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "meetName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "zip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MeetResult",
            "id": "interface-MeetResult-7e36cbcecac443930b5aafc4e20ddfe5",
            "file": "src/app/models/meet-result.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import firebase from 'firebase';\nimport Timestamp = firebase.firestore.Timestamp;\n\nexport interface MeetResult {\n    distanceInMiles: number;\n    meetName: string;\n    meetDateTime: Timestamp;\n    place: number;\n    season: number;\n    meetId: string;\n    time: string;\n    timeInSeconds: number;\n}\n",
            "properties": [
                {
                    "name": "distanceInMiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "meetDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Timestamp",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "meetId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "meetName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "place",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "season",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "timeInSeconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "scheduledMeet",
            "id": "interface-scheduledMeet-f678c1f2cac67506297929dafc9f1a23",
            "file": "src/app/models/schedule.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import firebase from 'firebase';\nimport Timestamp = firebase.firestore.Timestamp;\n\nexport interface scheduledMeet {\n    meetName: string;\n    meetId: string;\n    season: number;\n    date: Timestamp;\n}\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Timestamp",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "meetId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "meetName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "season",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "Season",
            "id": "interface-Season-756b476e12dc071f367364ea17c99dd9",
            "file": "src/app/models/season.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import firebase from 'firebase';\nimport Timestamp = firebase.firestore.Timestamp;\n\nexport interface Season {\n    id: string;\n    active: boolean;\n    seasonYear: number;\n    seasonTheme?: string;\n    startDate?: Timestamp;\n    endDate?: Timestamp;\n}\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Timestamp",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "seasonTheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "seasonYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Timestamp",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AthletesService",
            "id": "injectable-AthletesService-a365de6fdd27898f4d970c30411f9033",
            "file": "src/app/services/athletes.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createAthlete",
                    "args": [
                        {
                            "name": "newAthlete",
                            "type": "Partial<Athlete>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "athleteId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newAthlete",
                            "type": "Partial<Athlete>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "athleteId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createResult",
                    "args": [
                        {
                            "name": "newResult",
                            "type": "Partial<MeetResult>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resultId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "athleteId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newResult",
                            "type": "Partial<MeetResult>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resultId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "athleteId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAthlete",
                    "args": [
                        {
                            "name": "athleteId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "athleteId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAthleteByUrl",
                    "args": [
                        {
                            "name": "profileUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Athlete | null>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "profileUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findMeetResults",
                    "args": [
                        {
                            "name": "athleteId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortOrder",
                            "type": "OrderByDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'asc'"
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "3"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MeetResult[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "athleteId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortOrder",
                            "type": "OrderByDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'asc'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "3",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findMeetResultsBySeason",
                    "args": [
                        {
                            "name": "athleteId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "season",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2020"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MeetResult[]>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "athleteId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "season",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2020",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLeadersList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Athlete[]>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadActiveAthletesByGender",
                    "args": [
                        {
                            "name": "gender",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Athlete[]>",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gender",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadAthletesByGender",
                    "args": [
                        {
                            "name": "gender",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Athlete[]>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gender",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAthlete",
                    "args": [
                        {
                            "name": "athleteId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "changes",
                            "type": "Partial<Athlete>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "athleteId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "changes",
                            "type": "Partial<Athlete>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { convertSnaps } from './db.utils';\nimport { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Athlete } from '../models/athlete';\nimport { MeetResult } from '../models/meet-result';\nimport firebase from 'firebase';\nimport OrderByDirection = firebase.firestore.OrderByDirection;\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AthletesService {\n    constructor(private db: AngularFirestore) {}\n\n    findMeetResults(\n        athleteId: string,\n        sortOrder: OrderByDirection = 'asc',\n        pageNumber = 0,\n        pageSize = 3\n    ): Observable<MeetResult[]> {\n        return this.db\n            .collection(`athletes/${athleteId}/meetResults`, (ref) =>\n                ref\n                    .orderBy('meetName', sortOrder)\n                    .limit(pageSize)\n                    .startAfter(pageNumber * pageSize)\n            )\n            .get()\n            .pipe(map((results) => convertSnaps<MeetResult>(results)));\n    }\n\n    findMeetResultsBySeason(athleteId: string, season: number = 2020): Observable<MeetResult[]> {\n        return this.db\n            .collection(`athletes/${athleteId}/meetResults`, (ref) => ref.where('season', '==', season))\n            .get()\n            .pipe(map((results) => convertSnaps<MeetResult>(results)));\n    }\n\n    loadAthletesByGender(gender: string): Observable<Athlete[]> {\n        return this.db\n            .collection('athletes', (ref) => ref.where('gender', '==', gender)\n              .orderBy('lastName'))\n              .get()\n              .pipe(map((result) => convertSnaps<Athlete>(result)));\n    }\n\n    deleteAthlete(athleteId: string): Observable<any> {\n        return from(this.db.doc(`athletes/${athleteId}`).delete());\n    }\n\n    createAthlete(newAthlete: Partial<Athlete>, athleteId?: string): Observable<any> {\n        let save$: Observable<any>;\n\n        if (athleteId) {\n            save$ = from(this.db.doc(`athletes/${athleteId}`).set(newAthlete));\n        } else {\n            save$ = from(this.db.collection('athletes').add(newAthlete));\n        }\n\n        return save$.pipe(\n            map((res) => {\n                return {\n                    id: athleteId ?? res.id,\n                    ...newAthlete,\n                };\n            })\n        );\n    }\n\n    updateAthlete(athleteId: string, changes: Partial<Athlete>): Observable<any> {\n        return from(this.db.doc(`athletes/${athleteId}`).update(changes));\n    }\n\n    findAthleteByUrl(profileUrl: string): Observable<Athlete | null> {\n        return this.db\n            .collection('athletes', (ref) => ref.where('profileUrl', '==', profileUrl))\n            .get()\n            .pipe(\n                map((results) => {\n                    const athletes = convertSnaps<Athlete>(results);\n                    return athletes.length === 1 ? athletes[0] : null;\n                })\n            );\n    }\n\n    getLeadersList(): Observable<Athlete[]> {\n        return this.db\n            .collection('athletes', (ref) => ref.where('isTeamLeader', '==', true).orderBy('lastName'))\n            .get()\n            .pipe(map((result) => convertSnaps<Athlete>(result)));\n    }\n\n    createResult(newResult: Partial<MeetResult>, resultId: string, athleteId: string) {\n        let saveResult$: Observable<any>;\n\n        if (resultId) {\n            saveResult$ = from(this.db.doc(`athletes/${athleteId}/meetResults/${resultId}`).set(newResult));\n        } else {\n            saveResult$ = from(this.db.collection(`athletes/${athleteId}/meetResults`).add(newResult));\n        }\n\n        return saveResult$.pipe(\n            map((res) => {\n                return {\n                    id: resultId ?? res.id,\n                    ...newResult,\n                };\n            })\n        );\n    }\n\n  loadActiveAthletesByGender(gender: string): Observable<Athlete[]> {\n    return this.db\n      .collection('athletes', (ref) => ref.where('gender', '==', gender)\n        .where('active', '==', true)\n        .orderBy('lastName'))\n      .get()\n      .pipe(map((result) => convertSnaps<Athlete>(result)));\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MeetsService",
            "id": "injectable-MeetsService-a9051c889fcff2362036822778bbc3ac",
            "file": "src/app/services/meets.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createMeet",
                    "args": [
                        {
                            "name": "newMeet",
                            "type": "Partial<Meet>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "meetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newMeet",
                            "type": "Partial<Meet>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "meetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMeetById",
                    "args": [
                        {
                            "name": "meetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "meetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMeets",
                    "args": [
                        {
                            "name": "archived",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "archived",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMeet",
                    "args": [
                        {
                            "name": "meetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "changes",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "meetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "changes",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { convertSnaps } from './db.utils';\nimport { Meet } from '../models/meet';\nimport { map } from 'rxjs/operators';\nimport { from, Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class MeetsService {\n    constructor(private db: AngularFirestore) {}\n\n    loadMeets(archived: boolean) {\n        return this.db\n            .collection('meets', (ref) => ref.where('archived', '==', archived).orderBy('meetName'))\n            .get()\n            .pipe(map((result) => convertSnaps<Meet>(result)));\n    }\n\n    updateMeet(meetId: string, changes: any) {\n        return from(this.db.doc(`meets/${meetId}`).update(changes));\n    }\n\n    createMeet(newMeet: Partial<Meet>, meetId?: string): Observable<any> {\n        let save$: Observable<any>;\n        if (meetId) {\n            save$ = from(this.db.doc(`meets/${meetId}`).set(newMeet));\n        } else {\n            save$ = from(this.db.collection('meets').add(newMeet));\n        }\n\n        return save$.pipe(\n            map((res) => {\n                return {\n                    id: meetId ?? res.id,\n                    ...newMeet,\n                };\n            })\n        );\n    }\n\n    getMeetById(meetId: string) {\n        return this.db.doc<Meet>(`meets/${meetId}`).get().pipe();\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SeasonsService",
            "id": "injectable-SeasonsService-bf98ac9716473c256efd750de040a363",
            "file": "src/app/services/seasons.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "findSeasonBySeasonYear",
                    "args": [
                        {
                            "name": "seasonYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Season | null>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "seasonYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadActiveSeasonSchedule",
                    "args": [
                        {
                            "name": "seasonId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "seasonId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { Season } from '../models/season';\nimport { map } from 'rxjs/operators';\nimport { convertSnaps } from './db.utils';\nimport { Meet } from '../models/meet';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SeasonsService {\n    constructor(private db: AngularFirestore) {}\n\n    findSeasonBySeasonYear(seasonYear: string): Observable<Season | null> {\n        return this.db\n            .collection('seasons', (ref) => ref.where('seasonYear', '==', parseInt(seasonYear)))\n            .get()\n            .pipe(\n                map((results) => {\n                    const seasons = convertSnaps<Season>(results);\n                    return seasons.length === 1 ? seasons[0] : null;\n                })\n            );\n    }\n\n    loadActiveSeasonSchedule(seasonId) {\n        return this.db\n            .collection(`seasons/${seasonId}/seasonSchedule`)\n            .get()\n            .pipe(\n                map((result) => {\n                    const meets = convertSnaps<Meet>(result);\n                    return meets.length >= 1 ? meets : null;\n                })\n            );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-d800e12bc7736a6a5815a5e6cbfc90ee",
            "file": "src/app/services/user.service.ts",
            "properties": [
                {
                    "name": "isLoggedIn$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isLoggedOut$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "pictureUrl$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { Router } from '@angular/router';\nimport { map } from 'rxjs/operators';\nimport { loggedIn } from '@angular/fire/auth-guard';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class UserService {\n    isLoggedIn$: Observable<boolean>;\n    isLoggedOut$: Observable<boolean>;\n    pictureUrl$: Observable<string>;\n\n    constructor(private afAuth: AngularFireAuth, private router: Router) {\n        this.isLoggedIn$ = afAuth.authState.pipe(map((user) => !!user));\n        this.isLoggedOut$ = this.isLoggedIn$.pipe(map((loggedIn) => !loggedIn));\n        this.pictureUrl$ = afAuth.authState.pipe(map((user) => (user ? user.photoURL : null)));\n    }\n\n    logout(): void {\n        this.afAuth.signOut();\n        this.router.navigateByUrl('/login');\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AthleteResolver",
            "id": "injectable-AthleteResolver-f117aa8136a078b59882665ac3caa421",
            "file": "src/app/services/athlete.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Athlete>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router, Resolve, RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { Athlete } from '../models/athlete';\nimport { AthletesService } from './athletes.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AthleteResolver implements Resolve<Athlete> {\n    constructor(private athletesService: AthletesService) {}\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Athlete> {\n        const profileUrl = route.paramMap.get('profileUrl');\n        return this.athletesService.findAthleteByUrl(profileUrl);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "SeasonResolver",
            "id": "injectable-SeasonResolver-098be0982ce92aa92822be0a56837154",
            "file": "src/app/services/season.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Season>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router, Resolve, RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { Season } from '../models/season';\nimport { SeasonsService } from './seasons.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SeasonResolver implements Resolve<Season> {\n    constructor(private seasonsService: SeasonsService) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Season> {\n        const seasonYear = route.paramMap.get('seasonYear');\n        return this.seasonsService.findSeasonBySeasonYear(seasonYear);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "seasonsService",
                        "type": "SeasonsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "seasonsService",
                        "type": "SeasonsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "GlobalSettings",
            "id": "class-GlobalSettings-b29e4dd6652819efe7d8afe501569107",
            "file": "src/app/global-settings.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GlobalSettings {\n    public static activeSeason: number = new Date().getFullYear();\n}\n",
            "properties": [
                {
                    "name": "activeSeason",
                    "defaultValue": "new Date().getFullYear()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-ab53a6d52c2dbdce66d933e54898e4cf",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeSeason",
                    "defaultValue": "GlobalSettings.activeSeason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "today",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserService",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { UserService } from './services/user.service';\nimport { GlobalSettings } from './global-settings';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n    constructor(public user: UserService) {}\n    today = new Date();\n    public activeSeason = GlobalSettings.activeSeason;\n\n    logout(): void {\n        this.user.logout();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ">>> body {\n    margin: 0;\n}\n\nmain {\n    margin: 30px;\n}\n\n.user-avatar {\n    max-height: 35px;\n    border-radius: 4px;\n}\n\n.toolbar-tools {\n    display: flex;\n    width: 100%;\n}\n\n.filler {\n    flex: 1 1 auto;\n    width: 100%;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "user",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-sidenav-container fullscreen>\n    <mat-sidenav #start (click)=\"start.close()\">\n        <mat-nav-list>\n            <a mat-list-item routerLink=\"/\">\n                <mat-icon>face</mat-icon>\n                <span>Athletes</span>\n            </a>\n\n            <a mat-list-item routerLink=\"/meets\">\n                <mat-icon>add_location</mat-icon>\n                <span>Meets</span>\n            </a>\n\n            <a mat-list-item [routerLink]=\"['/seasons', activeSeason]\">\n                <mat-icon>event</mat-icon>\n                <span>Season</span>\n            </a>\n\n            <a mat-list-item routerLink=\"/create-user\">\n                <mat-icon>add_circle_outline</mat-icon>\n                <span>Create user</span>\n            </a>\n\n            <a mat-list-item routerLink=\"about\">\n                <mat-icon>question_answer</mat-icon>\n                <span>About</span>\n            </a>\n            <a mat-list-item routerLink=\"login\" *ngIf=\"user.isLoggedOut$ | async\">\n                <mat-icon>person_add</mat-icon>\n                <span>Register</span>\n            </a>\n\n            <a mat-list-item routerLink=\"login\" *ngIf=\"user.isLoggedOut$ | async\">\n                <mat-icon>account_circle</mat-icon>\n                <span>Login</span>\n            </a>\n\n            <a mat-list-item *ngIf=\"user.isLoggedIn$ | async\" (click)=\"logout()\">\n                <mat-icon>exit_to_app</mat-icon>\n                <span>Logout</span>\n            </a>\n        </mat-nav-list>\n    </mat-sidenav>\n\n    <mat-toolbar color=\"primary\">\n        <div class=\"toolbar-tools\">\n            <button mat-icon-button (click)=\"start.open('mouse')\">\n                <mat-icon>menu</mat-icon>\n            </button>\n\n            <div class=\"filler\"></div>\n\n            <ng-container *ngIf=\"user.pictureUrl$ | async as pictureUrl\">\n                <img class=\"user-avatar\" [src]=\"pictureUrl\" />\n            </ng-container>\n        </div>\n    </mat-toolbar>\n\n    <router-outlet></router-outlet>\n</mat-sidenav-container>\n"
        },
        {
            "name": "AthleteComponent",
            "id": "component-AthleteComponent-d24dc53c265b93fba4231845e0b16489",
            "file": "src/app/athlete/athlete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-athlete",
            "styleUrls": [
                "./athlete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./athlete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "athlete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Athlete",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "currentSeason",
                    "defaultValue": "2020",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['meetName', 'place', 'time']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "lastPageLoaded",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "meetResults",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MeetResult[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "addResult",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Athlete } from '../models/athlete';\nimport { ActivatedRoute } from '@angular/router';\nimport { AthletesService } from '../services/athletes.service';\nimport { finalize } from 'rxjs/operators';\nimport { MeetResult } from '../models/meet-result';\n\n@Component({\n    selector: 'app-athlete',\n    templateUrl: './athlete.component.html',\n    styleUrls: ['./athlete.component.scss'],\n})\nexport class AthleteComponent implements OnInit {\n    athlete: Athlete;\n    meetResults: MeetResult[];\n    loading: boolean = false;\n    lastPageLoaded = 0;\n    currentSeason = 2020;\n    displayedColumns = ['meetName', 'place', 'time'];\n\n    constructor(private route: ActivatedRoute, private athletesService: AthletesService) {}\n\n    ngOnInit(): void {\n        this.athlete = this.route.snapshot.data.athlete;\n        this.loading = true;\n\n        this.athletesService\n            .findMeetResultsBySeason(this.athlete.id, this.currentSeason)\n            .pipe(finalize(() => (this.loading = false)))\n            .subscribe((results) => (this.meetResults = results));\n    }\n\n    loadMore(): void {\n        this.lastPageLoaded++;\n        this.loading = true;\n        this.athletesService\n            .findMeetResults(this.athlete.id, 'asc', this.lastPageLoaded)\n            .pipe(finalize(() => (this.loading = false)))\n            .subscribe((results) => (this.meetResults = this.meetResults.concat(results)));\n    }\n\n    addResult() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".athlete {\n    max-width: 650px;\n    margin: 20px auto 0 auto;\n}\n\n.athlete h1 {\n  text-align: center;\n}\n.athlete-thumbnail {\n    width: 200px;\n    border-radius: 4px;\n    margin: 20px auto;\n    display: block;\n}\n\n.description-cell {\n    text-align: left;\n    margin: 10px auto;\n}\n\n.duration-cell {\n    text-align: center;\n}\n\n.duration-cell mat-icon {\n    display: inline-block;\n    vertical-align: middle;\n    font-size: 20px;\n}\n\n.spinner-container {\n    height: 360px;\n    width: 390px;\n    position: fixed;\n}\n\n.results-table {\n    min-height: 360px;\n    margin-top: 10px;\n}\n\n.spinner-container mat-spinner {\n    margin: 130px auto 0 auto;\n}\n\n.bottom-toolbar {\n    margin: 30px 0;\n    font-size: 18px;\n}\n",
                    "styleUrl": "./athlete.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"athlete\">\n    <h1>{{ athlete?.firstName }} {{ athlete?.lastName }}</h1>\n  <mat-divider></mat-divider>\n  <h2>Basic Contact</h2>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">Primary Phone: {{ athlete?.primaryPhone }}</div>\n    <div class=\"col-xs-6\">Secondary Phone: {{ athlete?.primaryPhone }}</div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">Email: {{ athlete?.email }}</div>\n    <div class=\"col-xs-6\">Graduation Year: {{ athlete?.gradYear }}</div>\n  </div>\n  <mat-divider></mat-divider>\n  <h2>Uniform Info</h2>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      Top: {{ athlete?.uniformTopSize }}<br/>\n      Bottom: {{ athlete?.uniformBottomSize }}\n    </div>\n    <div class=\"col-xs-6\">\n      Bag Number: {{ athlete?.bagNumber }}<br/>\n      Warmup: {{ athlete?.warmUpTopSize }}</div>\n  </div>\n    <div class=\"spinner-container\" *ngIf=\"loading\">\n        <mat-spinner></mat-spinner>\n    </div>\n  <h2>Meet Results</h2>\n    <mat-table class=\"results-table\" [dataSource]=\"meetResults\">\n      <ng-container matColumnDef=\"dateTime\">\n        <mat-header-cell *matHeaderCellDef>Date</mat-header-cell>\n\n        <mat-cell *matCellDef=\"let result\">{{ result.dateTime }}</mat-cell>\n      </ng-container>\n\n      <ng-container matColumnDef=\"meetName\">\n            <mat-header-cell *matHeaderCellDef>Meet Name</mat-header-cell>\n\n            <mat-cell *matCellDef=\"let result\">{{ result.meetName }}</mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"place\">\n            <mat-header-cell *matHeaderCellDef>Place</mat-header-cell>\n\n            <mat-cell *matCellDef=\"let result\">{{ result.place }}</mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"time\">\n            <mat-header-cell *matHeaderCellDef>Time</mat-header-cell>\n\n            <mat-cell class=\"description-cell\" *matCellDef=\"let result\">{{ result.time }}</mat-cell>\n        </ng-container>\n\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n\n        <mat-row *matRowDef=\"let row; columns: displayedColumns\"></mat-row>\n    </mat-table>\n    <button mat-mini-fab color=\"accent\">\n        <mat-icon class=\"add-athlete-btn\" [routerLink]=\"['/create-result', athlete.id]\">add</mat-icon>\n    </button>\n\n    <button class=\"bottom-toolbar\" mat-raised-button color=\"primary\" (click)=\"loadMore()\">Load More</button>\n</div>\n"
        },
        {
            "name": "AthletesCardListComponent",
            "id": "component-AthletesCardListComponent-3ab2ed728030c2e93b08e69e884d8370",
            "file": "src/app/athletes-card-list/athletes-card-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "athletes-card-list",
            "styleUrls": [
                "./athletes-card-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./athletes-card-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "athletes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "Athlete[] | undefined"
                }
            ],
            "outputsClass": [
                {
                    "name": "athleteDeleted",
                    "defaultValue": "new EventEmitter<Athlete>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "athleteEdited",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deleteAthlete",
                    "args": [
                        {
                            "name": "athlete",
                            "type": "Athlete",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "athlete",
                            "type": "Athlete",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editAthlete",
                    "args": [
                        {
                            "name": "athlete",
                            "type": "Athlete",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "athlete",
                            "type": "Athlete",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Athlete } from '../models/athlete';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { EditAthleteDialogComponent } from '../edit-athlete-dialog/edit-athlete-dialog.component';\nimport { AthletesService } from '../services/athletes.service';\nimport { catchError, tap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n@Component({\n    selector: 'athletes-card-list',\n    templateUrl: './athletes-card-list.component.html',\n    styleUrls: ['./athletes-card-list.component.scss'],\n})\nexport class AthletesCardListComponent implements OnInit {\n    @Input()\n    athletes: Athlete[] | undefined;\n\n    @Output()\n    athleteEdited = new EventEmitter();\n\n    @Output()\n    athleteDeleted = new EventEmitter<Athlete>();\n\n    constructor(private dialog: MatDialog, private router: Router, private athletesService: AthletesService) {}\n\n    ngOnInit() {}\n\n    editAthlete(athlete: Athlete): void {\n        const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.disableClose = true;\n        dialogConfig.autoFocus = true;\n        dialogConfig.minWidth = '400px';\n\n        dialogConfig.data = athlete;\n\n        this.dialog\n            .open(EditAthleteDialogComponent, dialogConfig)\n            .afterClosed()\n            .subscribe((val) => {\n                if (val) {\n                    this.athleteEdited.emit();\n                }\n            });\n    }\n\n    deleteAthlete(athlete: Athlete) {\n        this.athletesService\n            .deleteAthlete(athlete.id)\n            .pipe(\n                tap(() => {\n                    console.log('deleted athlete: ', athlete);\n                    this.athleteDeleted.emit(athlete);\n                }),\n                catchError((err) => {\n                    console.log(err);\n                    alert('could not delete athlete.');\n                    return throwError(err);\n                })\n            )\n            .subscribe();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".profile-image {\n    float: left;\n    height: 80px;\n    width: 80px;\n}\n\n.athlete-card {\n    margin: 20px 10px;\n}\n\n.athlete-actions {\n    text-align: center;\n}\n",
                    "styleUrl": "./athletes-card-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card *ngFor=\"let athlete of athletes\" class=\"athlete-card\">\n    <mat-card-content>\n        <img mat-card-sm-image alt=\"profile image\" class=\"profile-image\" src=\"./assets/avatar-300x300.jpg\" />\n        <mat-card-content>{{ athlete.firstName }} {{ athlete.lastName }}</mat-card-content>\n    </mat-card-content>\n\n    <mat-card-actions class=\"athlete-actions\">\n        <button mat-button class=\"mat-raised-button mat-primary\" [routerLink]=\"['/athletes', athlete.profileUrl]\">\n            VIEW DETAILS\n        </button>\n\n        <ng-container>\n            <ng-container>\n                <button mat-button class=\"mat-raised-button mat-accent\" (click)=\"editAthlete(athlete)\">EDIT</button>\n                <button mat-mini-fab color=\"warn\" (click)=\"deleteAthlete(athlete)\">\n                    <mat-icon>delete</mat-icon>\n                </button>\n            </ng-container>\n        </ng-container>\n    </mat-card-actions>\n</mat-card>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 322,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CreateAthleteComponent",
            "id": "component-CreateAthleteComponent-b2bc39b2389cd210e7a611ecba35eb38",
            "file": "src/app/create-athlete/create-athlete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "create-athlete",
            "styleUrls": [
                "create-athlete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "create-athlete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "athleteForm",
                    "defaultValue": "this.fb.group({\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        gender: ['', Validators.required],\n        gradYear: ['', Validators.required],\n        active: [true],\n        primaryPhone: [''],\n        secondaryPhone: [''],\n        email: [''],\n        uniformBottomSize: [''],\n        uniformTopSize: [''],\n        warmUpTopSize: [''],\n        bagNumber: [''],\n        profileUrl: [''],\n        tshirtSize: [''],\n        isTeamLeader: [false],\n        teamLeader: [''],\n        physicalCurrent: [true],\n        physicalExpiryDate: [null],\n        bio: [''],\n        notes: [''],\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "athleteId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isTeamLeader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "leaders$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Athlete[]>",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCreateAthlete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTeamLeaderFlag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AthletesService } from '../services/athletes.service';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Athlete } from '../models/athlete';\nimport firebase from 'firebase';\nimport Timestamp = firebase.firestore.Timestamp;\nimport { catchError, tap } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\n\n@Component({\n    selector: 'create-athlete',\n    templateUrl: 'create-athlete.component.html',\n    styleUrls: ['create-athlete.component.scss'],\n})\nexport class CreateAthleteComponent implements OnInit {\n    athleteForm = this.fb.group({\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        gender: ['', Validators.required],\n        gradYear: ['', Validators.required],\n        active: [true],\n        primaryPhone: [''],\n        secondaryPhone: [''],\n        email: [''],\n        uniformBottomSize: [''],\n        uniformTopSize: [''],\n        warmUpTopSize: [''],\n        bagNumber: [''],\n        profileUrl: [''],\n        tshirtSize: [''],\n        isTeamLeader: [false],\n        teamLeader: [''],\n        physicalCurrent: [true],\n        physicalExpiryDate: [null],\n        bio: [''],\n        notes: [''],\n    });\n    private athleteId: string;\n    isTeamLeader: boolean = false;\n    leaders$: Observable<Athlete[]>;\n\n    constructor(\n        private fb: FormBuilder,\n        private athletesService: AthletesService,\n        private afs: AngularFirestore,\n        private router: Router\n    ) {}\n\n    ngOnInit(): void {\n        this.athleteId = this.afs.createId();\n        this.leaders$ = this.athletesService.getLeadersList();\n    }\n\n    onCreateAthlete(): void {\n        const val = this.athleteForm.value;\n        const newAthlete: Partial<Athlete> = {\n            firstName: val.firstName,\n            lastName: val.lastName,\n            gender: val.gender,\n            gradYear: val.gradYear,\n            active: val.active,\n            primaryPhone: val.primaryPhone,\n            secondaryPhone: val.secondaryPhone,\n            email: val.email,\n            uniformBottomSize: val.uniformBottomSize,\n            uniformTopSize: val.uniformTopSize,\n            warmUpTopSize: val.warmUpTopSize,\n            bagNumber: val.bagNumber,\n            profileUrl: val.profileUrl,\n            tshirtSize: val.tshirtSize,\n            isTeamLeader: val.isTeamLeader,\n            teamLeader: val.teamLeader,\n            physicalCurrent: val.physicalCurrent,\n            bio: val.bio,\n            notes: val.notes,\n        };\n\n        newAthlete.physicalExpiryDate = Timestamp.fromDate(this.athleteForm.value.physicalExpiryDate);\n        newAthlete.profileUrl = val.firstName.toLowerCase() + '-' + val.lastName.toLowerCase();\n\n        this.athletesService\n            .createAthlete(newAthlete, this.athleteId)\n            .pipe(\n                tap(() => {\n                    this.router.navigateByUrl('/');\n                }),\n                catchError((err) => {\n                    console.log(err);\n                    alert('could not create athlete');\n                    return throwError(err);\n                })\n            )\n            .subscribe();\n    }\n\n    setTeamLeaderFlag(): void {\n        this.isTeamLeader = !this.isTeamLeader;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    display: flex;\n    justify-content: center;\n}\n\n.create-athlete {\n    margin-top: 20px;\n}\n\n.athlete-thumbnail {\n    max-width: 200px;\n    margin-bottom: 10px;\n    border-radius: 4px;\n}\n\n.create-athlete form {\n    display: flex;\n    flex-direction: column;\n}\n\n.athlete-image-upload {\n    margin: 0 0 20px 0;\n    display: flex;\n    flex-direction: column;\n}\n\n.promo {\n    margin-bottom: 20px;\n}\n\n.athlete-image-upload span {\n    margin-bottom: 10px;\n}\n\n.upload-progress {\n    display: flex;\n    margin: 10px;\n    max-width: 250px;\n}\n\n.progress-bar {\n    margin: 10px;\n    width: 300px;\n}\n\n.uploaded-image {\n    max-width: 250px;\n}\n",
                    "styleUrl": "create-athlete.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"create-athlete\">\n    <h3>Create New Athlete</h3>\n\n    <form [formGroup]=\"athleteForm\">\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"First Name\" matInput formControlName=\"firstName\" />\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"Last Name\" matInput formControlName=\"lastName\" />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <mat-select placeholder=\"Select gender\" formControlName=\"gender\">\n                <mat-option value=\"FEMALE\">Female</mat-option>\n                <mat-option value=\"MALE\">Male</mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"20xx\" matInput formControlName=\"gradYear\" />\n        </mat-form-field>\n\n        <mat-slide-toggle class=\"active-athlete\" color=\"primary\" formControlName=\"active\">\n            Athlete is currently active?\n        </mat-slide-toggle>\n\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"Primary Phone number\" matInput formControlName=\"primaryPhone\" />\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"Secondary Phone number\" matInput formControlName=\"secondaryPhone\" />\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"email\" matInput formControlName=\"email\" />\n        </mat-form-field>\n\n        <mat-select placeholder=\"Uniform Bottom Size\" formControlName=\"uniformBottomSize\">\n            <mat-option value=\"YL\">YL</mat-option>\n            <mat-option value=\"XS\">XS</mat-option>\n            <mat-option value=\"S\">S</mat-option>\n            <mat-option value=\"M\">M</mat-option>\n            <mat-option value=\"L\">L</mat-option>\n            <mat-option value=\"XL\">XL</mat-option>\n        </mat-select>\n\n        <mat-select placeholder=\"Uniform Top Size\" formControlName=\"uniformTopSize\">\n            <mat-option value=\"YL\">YL</mat-option>\n            <mat-option value=\"XS\">XS</mat-option>\n            <mat-option value=\"S\">S</mat-option>\n            <mat-option value=\"M\">M</mat-option>\n            <mat-option value=\"L\">L</mat-option>\n            <mat-option value=\"XL\">XL</mat-option>\n        </mat-select>\n\n        <mat-select placeholder=\"Warm Up Size\" formControlName=\"warmUpTopSize\">\n            <mat-option value=\"YL\">YL</mat-option>\n            <mat-option value=\"XS\">XS</mat-option>\n            <mat-option value=\"S\">S</mat-option>\n            <mat-option value=\"M\">M</mat-option>\n            <mat-option value=\"L\">L</mat-option>\n            <mat-option value=\"XL\">XL</mat-option>\n        </mat-select>\n\n        <mat-select placeholder=\"Tee Shirt Size\" formControlName=\"tshirtSize\">\n            <mat-option value=\"YL\">YL</mat-option>\n            <mat-option value=\"XS\">XS</mat-option>\n            <mat-option value=\"S\">S</mat-option>\n            <mat-option value=\"M\">M</mat-option>\n            <mat-option value=\"L\">L</mat-option>\n            <mat-option value=\"XL\">XL</mat-option>\n        </mat-select>\n\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"Bag #\" matInput formControlName=\"bagNumber\" />\n        </mat-form-field>\n\n        <mat-slide-toggle\n            class=\"active-athlete\"\n            color=\"primary\"\n            formControlName=\"isTeamLeader\"\n            (change)=\"setTeamLeaderFlag()\"\n        >\n            Athlete is Team Leader?\n        </mat-slide-toggle>\n\n        <mat-select placeholder=\"Leader\" formControlName=\"teamLeader\" *ngIf=\"!isTeamLeader\">\n            <mat-option *ngFor=\"let leader of leaders$ | async\" value=\"{{ leader.firstName }} {{ leader.lastName }}\"\n                >{{ leader.firstName }} {{ leader.lastName }}</mat-option\n            >\n        </mat-select>\n\n        <mat-slide-toggle class=\"active-athlete\" color=\"primary\" formControlName=\"physicalCurrent\">\n            Athlete Physical is Current?\n        </mat-slide-toggle>\n\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Date of Physical</mat-label>\n            <input matInput [matDatepicker]=\"physicalDatePicker\" formControlName=\"physicalExpiryDate\" />\n            <mat-datepicker-toggle matSuffix [for]=\"physicalDatePicker\"></mat-datepicker-toggle>\n            <mat-datepicker #physicalDatePicker></mat-datepicker>\n        </mat-form-field>\n\n        <div class=\"athlete-image-upload\">\n            <span>Profile Pic:</span>\n\n            <img class=\"athlete-thumbnail mat-elevation-z3\" />\n        </div>\n\n        <mat-form-field appearance=\"outline\">\n            <textarea matInput placeholder=\"Bio\" formControlName=\"bio\"></textarea>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\">\n            <textarea matInput placeholder=\"Notes\" formControlName=\"notes\"></textarea>\n        </mat-form-field>\n\n        <button mat-raised-button color=\"warn\" [disabled]=\"!athleteForm.valid\" (click)=\"onCreateAthlete()\">\n            Create Athlete\n        </button>\n    </form>\n</div>\n"
        },
        {
            "name": "CreateMeetComponent",
            "id": "component-CreateMeetComponent-1d158f328b11d79743ac724e33ee00c5",
            "file": "src/app/create-meet/create-meet.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-meet",
            "styleUrls": [
                "./create-meet.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-meet.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n        hostSchool: ['', Validators.required],\n        archived: [false],\n        meetName: ['', Validators.required],\n        locationUrl: [''],\n        address: [''],\n        city: [''],\n        state: [''],\n        zip: [''],\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "meetId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selected",
                    "defaultValue": "'IA'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCreateMeet",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MeetsService } from '../services/meets.service';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport { Meet } from '../models/meet';\nimport { catchError, tap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n@Component({\n    selector: 'app-create-meet',\n    templateUrl: './create-meet.component.html',\n    styleUrls: ['./create-meet.component.scss'],\n})\nexport class CreateMeetComponent implements OnInit {\n    form = this.fb.group({\n        hostSchool: ['', Validators.required],\n        archived: [false],\n        meetName: ['', Validators.required],\n        locationUrl: [''],\n        address: [''],\n        city: [''],\n        state: [''],\n        zip: [''],\n    });\n    private meetId: string;\n    selected = 'IA';\n\n    constructor(\n        private fb: FormBuilder,\n        private meetsService: MeetsService,\n        private afs: AngularFirestore,\n        private router: Router\n    ) {}\n\n    ngOnInit(): void {\n        this.meetId = this.afs.createId();\n    }\n\n    onCreateMeet(): void {\n        const val = this.form.value;\n        const newMeet: Partial<Meet> = {\n            hostSchool: val.hostSchool,\n            archived: val.archived,\n            meetName: val.meetName,\n            locationUrl: val.locationUrl,\n            address: val.address,\n            city: val.city,\n            state: val.state,\n            zip: val.zip,\n        };\n\n        this.meetsService\n            .createMeet(newMeet, this.meetId)\n            .pipe(\n                tap(() => {\n                    this.router.navigateByUrl('/meets');\n                }),\n                catchError((err) => {\n                    console.log(err);\n                    alert('could not create meet');\n                    return throwError(err);\n                })\n            )\n            .subscribe();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    display: flex;\n    justify-content: center;\n}\n\n.create-meet {\n    margin-top: 20px;\n    form {\n        display: flex;\n        flex-direction: column;\n    }\n}\n\n.archived {\n    margin-bottom: 20px;\n}\n",
                    "styleUrl": "./create-meet.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "meetsService",
                        "type": "MeetsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "meetsService",
                        "type": "MeetsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"create-meet\">\n    <h3>Create New Meet</h3>\n    <form [formGroup]=\"form\">\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"Meet Name\" matInput formControlName=\"meetName\" />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"Host School\" matInput formControlName=\"hostSchool\" />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"address\" matInput formControlName=\"address\" />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"city\" matInput formControlName=\"city\" />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <mat-select [(value)]=\"selected\" placeholder=\"Select state\" formControlName=\"state\">\n                <mat-option value=\"AL\">ALABAMA</mat-option>\n                <mat-option value=\"AK\">ALASKA</mat-option>\n                <mat-option value=\"AZ\">ARIZONA</mat-option>\n                <mat-option value=\"AR\">ARKANSAS</mat-option>\n                <mat-option value=\"CA\">CALIFORNIA</mat-option>\n                <mat-option value=\"CO\">COLORADO</mat-option>\n                <mat-option value=\"CT\">CONNECTICUT</mat-option>\n                <mat-option value=\"DE\">DELEWARE</mat-option>\n                <mat-option value=\"DC\">DISTRICT OF COLUMBIA</mat-option>\n                <mat-option value=\"FL\">FLORIDA</mat-option>\n                <mat-option value=\"GA\">GEORGIA</mat-option>\n                <mat-option value=\"HI\">HAWAII</mat-option>\n                <mat-option value=\"ID\">IDAHO</mat-option>\n                <mat-option value=\"IL\">ILLINOIS</mat-option>\n                <mat-option value=\"IN\">INDIANA</mat-option>\n                <mat-option value=\"IA\">IOWA</mat-option>\n                <mat-option value=\"KS\">KANSAS</mat-option>\n                <mat-option value=\"KY\">KENTUCKY</mat-option>\n                <mat-option value=\"LA\">LOUISIANA</mat-option>\n                <mat-option value=\"ME\">MAINE</mat-option>\n                <mat-option value=\"MD\">MARYLAND</mat-option>\n                <mat-option value=\"MA\">MASSACHUSETTS</mat-option>\n                <mat-option value=\"MI\">MICHIGAN</mat-option>\n                <mat-option value=\"MN\">MINNESOTA</mat-option>\n                <mat-option value=\"MS\">MISSISSIPPI</mat-option>\n                <mat-option value=\"MO\">MISSOURI</mat-option>\n                <mat-option value=\"MT\">MONTANA</mat-option>\n                <mat-option value=\"NE\">NEBRASKA</mat-option>\n                <mat-option value=\"NV\">NEVADA</mat-option>\n                <mat-option value=\"NH\">NEW HAMPSHIRE</mat-option>\n                <mat-option value=\"NJ\">NEW JERSEY</mat-option>\n                <mat-option value=\"NM\">NEW MEXICO</mat-option>\n                <mat-option value=\"NY\">NEW YORK</mat-option>\n                <mat-option value=\"NC\">NORTH CAROLINA</mat-option>\n                <mat-option value=\"ND\">NORTH DAKOTA</mat-option>\n                <mat-option value=\"OH\">OHIO</mat-option>\n                <mat-option value=\"OK\">OKLAHOMA</mat-option>\n                <mat-option value=\"OR\">OREGON</mat-option>\n                <mat-option value=\"PA\">PENNSYLVANIA</mat-option>\n                <mat-option value=\"RI\">RHODE ISLAND</mat-option>\n                <mat-option value=\"SD\">SOUTH DAKOTA</mat-option>\n                <mat-option value=\"SC\">SOUTH CAROLINA</mat-option>\n                <mat-option value=\"TN\">TENNESSEE</mat-option>\n                <mat-option value=\"TX\">TEXAS</mat-option>\n                <mat-option value=\"UT\">UTAH</mat-option>\n                <mat-option value=\"VT\">VERMONT</mat-option>\n                <mat-option value=\"VA\">VIRGINIA</mat-option>\n                <mat-option value=\"WA\">WASHINGTON</mat-option>\n                <mat-option value=\"WV\">WEST VIRGINIA</mat-option>\n                <mat-option value=\"WI\">WISCONSIN</mat-option>\n                <mat-option value=\"WY\">WYOMING</mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"zip\" matInput formControlName=\"zip\" />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"location url\" matInput formControlName=\"locationUrl\" />\n        </mat-form-field>\n        <mat-slide-toggle class=\"archived\" color=\"primary\" formControlName=\"archived\">\n            Is meet archived?\n        </mat-slide-toggle>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!form.valid\" (click)=\"onCreateMeet()\">Create Meet</button>\n    </form>\n</div>\n"
        },
        {
            "name": "CreateResultComponent",
            "id": "component-CreateResultComponent-4aebf2ce599fb441d9fb80e8a05f3756",
            "file": "src/app/create-result/create-result.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-result",
            "styleUrls": [
                "./create-result.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-result.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "athleteId",
                    "defaultValue": "this.route.snapshot.paramMap.get('id')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n        distanceInMiles: [3.1, Validators.required],\n        meet: ['', Validators.required],\n        place: [],\n        season: [2020],\n        time: [''],\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "meetName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "meets$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Meet[]>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resultId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getTime",
                    "args": [
                        {
                            "name": "res",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "ev",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateMeet",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AthletesService } from '../services/athletes.service';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MeetsService } from '../services/meets.service';\nimport { Meet } from '../models/meet';\nimport { Observable, throwError } from 'rxjs';\nimport { MeetResult } from '../models/meet-result';\nimport { catchError, tap } from 'rxjs/operators';\nimport { MatSelectChange } from '@angular/material/select';\nimport { MatOption } from '@angular/material/core';\n\n@Component({\n    selector: 'app-create-result',\n    templateUrl: './create-result.component.html',\n    styleUrls: ['./create-result.component.scss'],\n})\nexport class CreateResultComponent implements OnInit {\n    private resultId: string;\n    private athleteId: string = this.route.snapshot.paramMap.get('id');\n    public meets$: Observable<Meet[]>;\n    // private meet: Meet;\n    private meetName: string;\n    form = this.fb.group({\n        distanceInMiles: [3.1, Validators.required],\n        meet: ['', Validators.required],\n        place: [],\n        season: [2020],\n        time: [''],\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private athleteService: AthletesService,\n        private afs: AngularFirestore,\n        private router: Router,\n        private route: ActivatedRoute,\n        private meetsService: MeetsService\n    ) {}\n\n    ngOnInit(): void {\n        this.resultId = this.afs.createId();\n        this.meets$ = this.meetsService.loadMeets(false);\n    }\n\n    getTime(res): number {\n        const timeArray = res.split(':');\n        return parseInt(timeArray[0]) * 60 + parseInt(timeArray[1]);\n    }\n\n    onChange(ev: MatSelectChange) {\n        this.meetName = (ev.source.selected as MatOption).viewValue;\n    }\n\n    onCreateMeet(): void {\n        const val = this.form.value;\n\n        const newResult: Partial<MeetResult> = {\n            distanceInMiles: parseInt(val.distanceInMiles),\n            place: parseInt(val.place),\n            meetId: val.meet,\n            season: parseInt(val.season),\n            time: val.time,\n            meetName: this.meetName,\n            timeInSeconds: null,\n        };\n\n        newResult.timeInSeconds = this.getTime(newResult.time);\n\n        this.athleteService\n            .createResult(newResult, this.resultId, this.athleteId)\n            .pipe(\n                tap(() => {\n                    this.router.navigateByUrl('/athletes');\n                }),\n                catchError((err) => {\n                    console.log(err);\n                    alert('could not create result');\n                    return throwError(err);\n                })\n            )\n            .subscribe();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    display: flex;\n    justify-content: center;\n}\n\n.create-result {\n    margin-top: 20px;\n}\n\n.create-result form {\n    display: flex;\n    flex-direction: column;\n}\n",
                    "styleUrl": "./create-result.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "athleteService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "meetsService",
                        "type": "MeetsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "athleteService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "meetsService",
                        "type": "MeetsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"create-result\">\n    <h3>Create New Meet Result for *athlete name here</h3>\n\n    <form [formGroup]=\"form\">\n        <mat-select placeholder=\"Select a Meet\" formControlName=\"meet\" (selectionChange)=\"onChange($event)\">\n            <mat-option *ngFor=\"let meet of meets$ | async\" [value]=\"meet.id\">{{ meet.meetName }}</mat-option>\n        </mat-select>\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"season\" matInput formControlName=\"season\" />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"Distance in miles(3.1)\" matInput formControlName=\"distanceInMiles\" />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"time (XX:XX.X)\" matInput formControlName=\"time\" />\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <input placeholder=\"place\" matInput formControlName=\"place\" />\n        </mat-form-field>\n        <button mat-raised-button color=\"warn\" [disabled]=\"!form.valid\" (click)=\"onCreateMeet()\">Create Meet</button>\n    </form>\n</div>\n"
        },
        {
            "name": "EditAthleteDialogComponent",
            "id": "component-EditAthleteDialogComponent-43e4c7b51d1d3c37a406ae1fd050a7d0",
            "file": "src/app/edit-athlete-dialog/edit-athlete-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "edit-athlete-dialog",
            "styleUrls": [
                "edit-athlete-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "edit-athlete-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "athlete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Athlete",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Athlete } from '../models/athlete';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { AthletesService } from '../services/athletes.service';\nimport firebase from 'firebase';\nimport Timestamp = firebase.firestore.Timestamp;\n\n@Component({\n    selector: 'edit-athlete-dialog',\n    templateUrl: 'edit-athlete-dialog.component.html',\n    styleUrls: ['edit-athlete-dialog.component.scss'],\n})\nexport class EditAthleteDialogComponent {\n    form: FormGroup;\n    athlete: Athlete;\n\n    constructor(\n        private dialogRef: MatDialogRef<EditAthleteDialogComponent>,\n        private fb: FormBuilder,\n        @Inject(MAT_DIALOG_DATA) athlete: Athlete,\n        private athletesService: AthletesService\n    ) {\n        this.athlete = athlete;\n        this.form = this.fb.group({\n            firstName: athlete.firstName,\n            lastName: athlete.lastName,\n            gender: athlete.gender,\n            gradYear: athlete.gradYear,\n            active: athlete.active,\n            primaryPhone: athlete.primaryPhone,\n            secondaryPhone: athlete.secondaryPhone,\n            email: athlete.email,\n            uniformBottomSize: athlete.uniformBottomSize,\n            uniformTopSize: athlete.uniformTopSize,\n            warmUpTopSize: athlete.warmUpTopSize,\n            bagNumber: athlete.bagNumber,\n            profileUrl: athlete.profileUrl,\n            tshirtSize: athlete.tshirtSize,\n            isTeamLeader: athlete.isTeamLeader,\n            teamLeader: athlete.teamLeader,\n            physicalCurrent: athlete.physicalCurrent,\n            physicalExpiryDate: athlete.physicalExpiryDate.toDate(),\n            bio: athlete.bio,\n            notes: athlete.notes,\n        });\n    }\n\n    close(): void {\n        this.dialogRef.close();\n    }\n\n    save(): void {\n        this.form.value.physicalExpiryDate = Timestamp.fromDate(this.form.value.physicalExpiryDate);\n        const changes = this.form.value;\n\n        this.athletesService.updateAthlete(this.athlete.id, changes).subscribe(() => {\n            this.dialogRef.close(changes);\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-form-field {\n    display: block;\n}\n\n.promo {\n    margin-bottom: 20px;\n}\n\ntextarea {\n    height: 100px;\n    resize: vertical;\n}\n\nmat-dialog-actions {\n    display: flex;\n    justify-content: flex-end;\n}\n",
                    "styleUrl": "edit-athlete-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditAthleteDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "athlete",
                        "type": "Athlete",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditAthleteDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "athlete",
                        "type": "Athlete",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Edit Athlete</h2>\n\n<mat-dialog-content [formGroup]=\"form\">\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"First Name\" matInput formControlName=\"firstName\" />\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"Last Name\" matInput formControlName=\"lastName\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-select placeholder=\"Select gender\" formControlName=\"gender\">\n            <mat-option value=\"FEMALE\">Female</mat-option>\n            <mat-option value=\"MALE\">Male</mat-option>\n        </mat-select>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"20xx\" matInput formControlName=\"gradYear\" />\n    </mat-form-field>\n\n    <mat-slide-toggle class=\"active-athlete\" color=\"primary\" formControlName=\"active\">\n        Athlete is currently active?\n    </mat-slide-toggle>\n\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"Primary Phone number\" matInput formControlName=\"primaryPhone\" />\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"Secondary Phone number\" matInput formControlName=\"secondaryPhone\" />\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"email\" matInput formControlName=\"email\" />\n    </mat-form-field>\n\n    <mat-select placeholder=\"Uniform Bottom Size\" formControlName=\"uniformBottomSize\">\n        <mat-option value=\"YL\">YL</mat-option>\n        <mat-option value=\"XS\">XS</mat-option>\n        <mat-option value=\"S\">S</mat-option>\n        <mat-option value=\"M\">M</mat-option>\n        <mat-option value=\"L\">L</mat-option>\n        <mat-option value=\"XL\">XL</mat-option>\n    </mat-select>\n\n    <mat-select placeholder=\"Uniform Top Size\" formControlName=\"uniformTopSize\">\n        <mat-option value=\"YL\">YL</mat-option>\n        <mat-option value=\"XS\">XS</mat-option>\n        <mat-option value=\"S\">S</mat-option>\n        <mat-option value=\"M\">M</mat-option>\n        <mat-option value=\"L\">L</mat-option>\n        <mat-option value=\"XL\">XL</mat-option>\n    </mat-select>\n\n    <mat-select placeholder=\"Warm Up Size\" formControlName=\"warmUpTopSize\">\n        <mat-option value=\"YL\">YL</mat-option>\n        <mat-option value=\"XS\">XS</mat-option>\n        <mat-option value=\"S\">S</mat-option>\n        <mat-option value=\"M\">M</mat-option>\n        <mat-option value=\"L\">L</mat-option>\n        <mat-option value=\"XL\">XL</mat-option>\n    </mat-select>\n\n    <mat-select placeholder=\"Tee Shirt Size\" formControlName=\"tshirtSize\">\n        <mat-option value=\"YL\">YL</mat-option>\n        <mat-option value=\"XS\">XS</mat-option>\n        <mat-option value=\"S\">S</mat-option>\n        <mat-option value=\"M\">M</mat-option>\n        <mat-option value=\"L\">L</mat-option>\n        <mat-option value=\"XL\">XL</mat-option>\n    </mat-select>\n\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"Bag #\" matInput formControlName=\"bagNumber\" />\n    </mat-form-field>\n\n    <mat-slide-toggle class=\"active-athlete\" color=\"primary\" formControlName=\"isTeamLeader\">\n        Athlete is Team Leader?\n    </mat-slide-toggle>\n\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"Team Leader\" matInput formControlName=\"teamLeader\" />\n    </mat-form-field>\n\n    <mat-slide-toggle class=\"active-athlete\" color=\"primary\" formControlName=\"physicalCurrent\">\n        Athlete Physical is Current?\n    </mat-slide-toggle>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Date of Physical</mat-label>\n        <input matInput [matDatepicker]=\"physicalDatePicker\" formControlName=\"physicalExpiryDate\" />\n        <mat-datepicker-toggle matSuffix [for]=\"physicalDatePicker\"></mat-datepicker-toggle>\n        <mat-datepicker #physicalDatePicker></mat-datepicker>\n    </mat-form-field>\n\n    <div class=\"athlete-image-upload\">\n        <span>Profile Pic:</span>\n\n        <img class=\"athlete-thumbnail mat-elevation-z3\" />\n    </div>\n\n    <mat-form-field appearance=\"outline\">\n        <textarea matInput placeholder=\"Bio\" formControlName=\"bio\"></textarea>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <textarea matInput placeholder=\"Notes\" formControlName=\"notes\"></textarea>\n    </mat-form-field>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button mat-raised-button (click)=\"close()\">Close</button>\n\n    <button mat-raised-button color=\"primary\" (click)=\"save()\">Save</button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "EditMeetDialogComponent",
            "id": "component-EditMeetDialogComponent-0bd8331118b0ff2b37d11b0f7575314c",
            "file": "src/app/edit-meet-dialog/edit-meet-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-meet-dialog",
            "styleUrls": [
                "./edit-meet-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-meet-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "meet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meet",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Meet } from '../models/meet';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { MeetsService } from '../services/meets.service';\n\n@Component({\n    selector: 'app-edit-meet-dialog',\n    templateUrl: './edit-meet-dialog.component.html',\n    styleUrls: ['./edit-meet-dialog.component.scss'],\n})\nexport class EditMeetDialogComponent implements OnInit {\n    form: FormGroup;\n    meet: Meet;\n\n    constructor(\n        private dialogRef: MatDialogRef<EditMeetDialogComponent>,\n        private fb: FormBuilder,\n        @Inject(MAT_DIALOG_DATA) meet: Meet,\n        private meetsService: MeetsService\n    ) {\n        this.meet = meet;\n        this.form = this.fb.group({\n            hostSchool: meet.hostSchool,\n            archived: meet.archived,\n            meetName: meet.meetName,\n            locationUrl: meet.locationUrl,\n            address: meet.address,\n            city: meet.city,\n            state: meet.state,\n            zip: meet.zip,\n        });\n    }\n\n    ngOnInit(): void {}\n\n    close(): void {\n        this.dialogRef.close();\n    }\n\n    save(): void {\n        const changes = this.form.value;\n\n        this.meetsService.updateMeet(this.meet.id, changes).subscribe(() => {\n            this.dialogRef.close(changes);\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".archived {\n    margin-bottom: 20px;\n}\n",
                    "styleUrl": "./edit-meet-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditMeetDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "meet",
                        "type": "Meet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "meetsService",
                        "type": "MeetsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditMeetDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "meet",
                        "type": "Meet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "meetsService",
                        "type": "MeetsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 mat-dialog-title>Edit Meet</h2>\n<mat-dialog-content [formGroup]=\"form\">\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"Meet Name\" matInput formControlName=\"meetName\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"Host School\" matInput formControlName=\"hostSchool\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"address\" matInput formControlName=\"address\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"city\" matInput formControlName=\"city\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"state\" matInput formControlName=\"state\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"zip\" matInput formControlName=\"zip\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <input placeholder=\"location url\" matInput formControlName=\"locationUrl\" />\n    </mat-form-field>\n    <mat-slide-toggle class=\"archived\" color=\"primary\" formControlName=\"archived\"> Is meet archived? </mat-slide-toggle>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <button mat-raised-button (click)=\"close()\">Close</button>\n\n    <button mat-raised-button color=\"primary\" (click)=\"save()\">Save</button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-31c27536492c3a0c46aaa022e3ab3e05",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "femaleAthletes$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Athlete[]>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "maleAthletes$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Athlete[]>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reloadAthletes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { Athlete } from '../models/athlete';\nimport { AthletesService } from '../services/athletes.service';\nimport { GlobalSettings } from '../global-settings';\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './home.component.html',\n    styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit {\n    maleAthletes$: Observable<Athlete[]>;\n\n    femaleAthletes$: Observable<Athlete[]>;\n\n    constructor(private db: AngularFirestore, private athletesService: AthletesService) {}\n\n    ngOnInit(): void {\n        this.reloadAthletes();\n    }\n\n    reloadAthletes() {\n        this.femaleAthletes$ = this.athletesService.loadAthletesByGender('FEMALE');\n        this.maleAthletes$ = this.athletesService.loadAthletesByGender('MALE');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".athletes-panel {\n    max-width: 400px;\n    margin: 20px auto 0 auto;\n}\n\n.header {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.title {\n    text-align: center;\n    margin-right: 15px;\n}\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"athletes-panel\">\n    <div class=\"header\">\n        <h2 class=\"title\">Athletes</h2>\n        <button mat-mini-fab color=\"accent\">\n            <mat-icon class=\"add-athlete-btn\" routerLink=\"/create-athlete\">add</mat-icon>\n        </button>\n    </div>\n    <mat-tab-group>\n        <mat-tab label=\"Boys\">\n            <athletes-card-list\n                [athletes]=\"maleAthletes$ | async\"\n                (athleteEdited)=\"reloadAthletes()\"\n                (athleteDeleted)=\"reloadAthletes()\"\n            ></athletes-card-list>\n        </mat-tab>\n\n        <mat-tab label=\"Girls\">\n            <athletes-card-list\n                [athletes]=\"femaleAthletes$ | async\"\n                (athleteEdited)=\"reloadAthletes()\"\n                (athleteDeleted)=\"reloadAthletes()\"\n            ></athletes-card-list>\n        </mat-tab>\n    </mat-tab-group>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-ed46db4f9532a26672f1941ab206a6cc",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ui",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "firebaseui.auth.AuthUI",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoginSuccessful",
                    "args": [
                        {
                            "name": "results",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "results",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport * as firebaseui from 'firebaseui';\nimport firebase from 'firebase/app';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { Router } from '@angular/router';\nimport EmailAuthProvider = firebase.auth.EmailAuthProvider;\nimport GoogleAuthProvider = firebase.auth.GoogleAuthProvider;\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n    ui: firebaseui.auth.AuthUI;\n\n    constructor(private afAuth: AngularFireAuth, private router: Router) {}\n\n    ngOnInit(): void {\n        this.afAuth.app.then((app) => {\n            const uiConfig = {\n                signInOptions: [EmailAuthProvider.PROVIDER_ID, GoogleAuthProvider.PROVIDER_ID],\n                callbacks: {\n                    signInSuccessWithAuthResult: this.onLoginSuccessful.bind(this),\n                },\n            };\n\n            this.ui = new firebaseui.auth.AuthUI(app.auth());\n            this.ui.start('#firebaseui-auth-container', uiConfig);\n\n            this.ui.disableAutoSignIn(); //remove for production @Rob\n        });\n    }\n\n    onLoginSuccessful(results): void {\n        console.log('Firebase UI result: ', results);\n        this.router.navigateByUrl('/');\n    }\n\n    ngOnDestroy(): void {\n        this.ui.delete();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".auth-container {\n}\n\n.login {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-top: 40px;\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"login\">\n    <h2>Sign In</h2>\n\n    <div id=\"firebaseui-auth-container\" class=\"auth-container\"></div>\n</div>\n"
        },
        {
            "name": "MeetsCardListComponent",
            "id": "component-MeetsCardListComponent-ef6d4ae69ddfe90195bf0ca41b44366f",
            "file": "src/app/meets-card-list/meets-card-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "meets-card-list",
            "styleUrls": [
                "./meets-card-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./meets-card-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "meets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Meet[] | undefined"
                }
            ],
            "outputsClass": [
                {
                    "name": "meetDeleted",
                    "defaultValue": "new EventEmitter<Meet>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "meetEdited",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "editMeet",
                    "args": [
                        {
                            "name": "meet",
                            "type": "Meet",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "meet",
                            "type": "Meet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Meet } from '../models/meet';\nimport { MeetsService } from '../services/meets.service';\nimport { Router } from '@angular/router';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { EditMeetDialogComponent } from '../edit-meet-dialog/edit-meet-dialog.component';\n\n@Component({\n    selector: 'meets-card-list',\n    templateUrl: './meets-card-list.component.html',\n    styleUrls: ['./meets-card-list.component.scss'],\n})\nexport class MeetsCardListComponent implements OnInit {\n    @Input()\n    meets: Meet[] | undefined;\n\n    @Output()\n    meetEdited = new EventEmitter();\n\n    @Output()\n    meetDeleted = new EventEmitter<Meet>();\n\n    constructor(private dialog: MatDialog, private router: Router, private meetsService: MeetsService) {}\n\n    ngOnInit(): void {}\n\n    editMeet(meet: Meet): void {\n        const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.disableClose = true;\n        dialogConfig.autoFocus = true;\n        dialogConfig.maxWidth = '400px';\n        dialogConfig.data = meet;\n\n        this.dialog\n            .open(EditMeetDialogComponent, dialogConfig)\n            .afterClosed()\n            .subscribe((val) => {\n                if (val) {\n                    this.meetEdited.emit();\n                }\n            });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".meet-card {\n    margin: 20px 10px;\n}\n\n.meet-actions {\n    text-align: center;\n}\n",
                    "styleUrl": "./meets-card-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "meetsService",
                        "type": "MeetsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "meetsService",
                        "type": "MeetsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card *ngFor=\"let meet of meets\" class=\"meet-card\">\n    <mat-card-content>\n        <h3>{{ meet.meetName }}</h3>\n        <ng-container *ngIf=\"!meet.archived\">\n            <p>{{ meet.hostSchool }}</p>\n            <p>{{ meet.address }}</p>\n            <p>{{ meet.city }} {{ meet.state }} {{ meet.zip }}</p>\n            <p><a href=\"{{ meet.locationUrl }}\" target=\"_blank\">Link to Map</a></p>\n        </ng-container>\n    </mat-card-content>\n    <mat-card-actions class=\"meet-actions\">\n        <button mat-button class=\"mat-raised-button mat-primary\">VIEW DETAILS</button>\n        <ng-container>\n            <ng-container>\n                <button mat-button class=\"mat-raised-button mat-accent meet-edit\" (click)=\"editMeet(meet)\">Edit</button>\n\n                <button mat-mini-fab color=\"warn\">\n                    <mat-icon>delete</mat-icon>\n                </button>\n            </ng-container>\n        </ng-container>\n    </mat-card-actions>\n</mat-card>\n"
        },
        {
            "name": "MeetsComponent",
            "id": "component-MeetsComponent-b4ed5600c5ad4c80dc5b8293186fe608",
            "file": "src/app/meets/meets.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meets",
            "styleUrls": [
                "./meets.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./meets.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeMeets$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Meet[]>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "archivedMeets$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Meet[]>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "selectedSeason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reloadMeets",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Meet } from '../models/meet';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { MeetsService } from '../services/meets.service';\n\n@Component({\n    selector: 'app-meets',\n    templateUrl: './meets.component.html',\n    styleUrls: ['./meets.component.scss'],\n})\nexport class MeetsComponent implements OnInit {\n    activeMeets$: Observable<Meet[]>;\n    archivedMeets$: Observable<Meet[]>;\n    selectedSeason: number;\n\n    constructor(private db: AngularFirestore, private meetsService: MeetsService) {}\n\n    ngOnInit(): void {\n        this.reloadMeets();\n    }\n\n    reloadMeets(): void {\n        this.activeMeets$ = this.meetsService.loadMeets(false);\n        this.archivedMeets$ = this.meetsService.loadMeets(true);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".meets-panel {\n    max-width: 400px;\n    margin: 20px auto 0 auto;\n}\n\n.header {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.title {\n    text-align: center;\n    margin-right: 15px;\n}\n",
                    "styleUrl": "./meets.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "meetsService",
                        "type": "MeetsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "meetsService",
                        "type": "MeetsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"meets-panel\">\n    <div class=\"header\">\n        <h2 class=\"title\">Active Meets</h2>\n        <button mat-mini-fab color=\"accent\">\n            <mat-icon class=\"add-meet-btn\" routerLink=\"/create-meet\">add</mat-icon>\n        </button>\n    </div>\n\n    <meets-card-list [meets]=\"activeMeets$ | async\" (meetEdited)=\"reloadMeets()\"></meets-card-list>\n\n    <div class=\"header\">\n        <h2 class=\"title\">Inactive Meets</h2>\n    </div>\n\n    <meets-card-list [meets]=\"archivedMeets$ | async\" (meetEdited)=\"reloadMeets()\"></meets-card-list>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SeasonComponent",
            "id": "component-SeasonComponent-535748223d5993cdcc73e2534098e0e4",
            "file": "src/app/season/season.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-season",
            "styleUrls": [
                "./season.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./season.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "['meetName']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "femaleAthletes$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Athlete[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "maleAthletes$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Athlete[]>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "roster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Athlete[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "season",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Season",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "seasonId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "seasonMeets$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "seasonYear",
                    "defaultValue": "this.route.snapshot.paramMap.get('seasonYear')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadAthletes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadMeets",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Season } from '../models/season';\nimport { Observable } from 'rxjs';\nimport { SeasonsService } from '../services/seasons.service';\nimport { Athlete } from '../models/athlete';\nimport { Meet } from '../models/meet';\nimport { ActivatedRoute } from '@angular/router';\nimport { AthletesService } from \"../services/athletes.service\";\n\n@Component({\n    selector: 'app-season',\n    templateUrl: './season.component.html',\n    styleUrls: ['./season.component.scss'],\n})\nexport class SeasonComponent implements OnInit {\n    season: Season;\n    seasonId: string;\n    private seasonYear: string = this.route.snapshot.paramMap.get('seasonYear');\n    roster: Athlete[];\n    seasonMeets$: Observable<Meet[] | undefined>;\n    maleAthletes$: Observable<Athlete[]>;\n    femaleAthletes$: Observable<Athlete[]>;\n    displayedColumns = ['meetName'];\n\n    constructor( private seasonsService: SeasonsService,\n                 private route: ActivatedRoute,\n                 private athletesService: AthletesService) {\n        this.season = this.route.snapshot.data.season;\n    }\n\n    ngOnInit(): void {\n        this.loadMeets();\n        this.loadAthletes();\n    }\n\n    loadMeets(): void {\n        this.seasonMeets$ = this.seasonsService.loadActiveSeasonSchedule(this.season.id);\n    }\n\n    loadAthletes(): void {\n      this.femaleAthletes$ = this.athletesService.loadActiveAthletesByGender('FEMALE');\n      this.maleAthletes$ = this.athletesService.loadActiveAthletesByGender('MALE');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".message {\n  font-size: .7em;\n  font-style: italic;\n}\n\n.season {\n    max-width: 390px;\n    margin: 20px auto 0 auto;\n}\n\n.theme {\n  font-style: italic;\n  padding:10px;\n  background-color: #009688;\n  color: white;\n}\n",
                    "styleUrl": "./season.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "seasonsService",
                        "type": "SeasonsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "seasonsService",
                        "type": "SeasonsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "athletesService",
                        "type": "AthletesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"season\" *ngIf=\"season\">\n    <h2>Pella Cross Country {{ season.seasonYear }} Season</h2>\n    <p class=\"theme\">Theme: {{ season.seasonTheme }}</p>\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <h3>Boys Roster</h3>\n        <div *ngFor=\"let athlete of maleAthletes$ | async\">\n          <a [routerLink]=\"['/athletes', athlete.profileUrl]\">{{athlete.firstName}} {{athlete.lastName}}</a>\n        </div>\n      </div>\n      <div class=\"col-xs-6\">\n        <h3>Girls Roster</h3>\n        <div *ngFor=\"let athlete of femaleAthletes$ | async\">\n          <a [routerLink]=\"['/athletes', athlete.profileUrl]\"> {{athlete.firstName}} {{athlete.lastName}}</a>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <p class=\"message\">Not seeing an athlete? They may be set to inactive. Click here to see all inactive athletes.</p>\n      </div>\n    </div>\n    <h3>Scheduled Meets</h3>\n    <mat-table [dataSource]=\"seasonMeets$ | async\" class=\"meets-table\">\n      <ng-container matColumnDef=\"meetName\">\n        <mat-header-cell *matHeaderCellDef>Meet Name</mat-header-cell>\n        <mat-cell *matCellDef=\"let meet\">{{ meet.meetName }} - </mat-cell>\n      </ng-container>\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n\n      <mat-row *matRowDef=\"let row; columns: displayedColumns\"></mat-row>\n    </mat-table>\n    <ng-container *ngIf=\"(seasonMeets$ | async)?.length > 0\">\n        <div *ngFor=\"let meet of seasonMeets$ | async\">Meet: {{ meet.meetName }} - {{ meet.id }}</div>\n    </ng-container>\n    <ng-container *ngIf=\"(seasonMeets$ | async)?.length < 1\">\n        <p>NO MEETS YET</p>\n    </ng-container>\n</div>\n<div *ngIf=\"!season\" class=\"season\">No Active season found. Create one now? See Archived seasons?</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-66b371de4c41c3e7af7f443dcf419745",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AngularFirestoreModule, USE_EMULATOR as USE_FIRESTORE_EMULATOR } from '@angular/fire/firestore';\nimport { AngularFireModule } from '@angular/fire';\nimport { AngularFireAuthModule, USE_EMULATOR as USE_AUTH_EMULATOR } from '@angular/fire/auth';\nimport { AngularFireFunctionsModule, USE_EMULATOR as USE_FUNCTIONS_EMULATOR } from '@angular/fire/functions';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { environment } from '../environments/environment';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { AthletesCardListComponent } from './athletes-card-list/athletes-card-list.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { CreateAthleteComponent } from './create-athlete/create-athlete.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatNativeDateModule, MatOptionModule } from '@angular/material/core';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { EditAthleteDialogComponent } from './edit-athlete-dialog/edit-athlete-dialog.component';\nimport { LoginComponent } from './login/login.component';\nimport { AthleteComponent } from './athlete/athlete.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTableModule } from '@angular/material/table';\nimport { MeetsComponent } from './meets/meets.component';\nimport { MeetsCardListComponent } from './meets-card-list/meets-card-list.component';\nimport { EditMeetDialogComponent } from './edit-meet-dialog/edit-meet-dialog.component';\nimport { CreateMeetComponent } from './create-meet/create-meet.component';\nimport { CreateResultComponent } from './create-result/create-result.component';\nimport { SeasonComponent } from './season/season.component';\nimport { MatExpansionModule } from \"@angular/material/expansion\";\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        AthletesCardListComponent,\n        CreateAthleteComponent,\n        EditAthleteDialogComponent,\n        HomeComponent,\n        LoginComponent,\n        AthleteComponent,\n        MeetsComponent,\n        MeetsCardListComponent,\n        EditMeetDialogComponent,\n        CreateMeetComponent,\n        CreateResultComponent,\n        SeasonComponent,\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        MatSidenavModule,\n        MatListModule,\n        MatIconModule,\n        MatToolbarModule,\n        MatButtonModule,\n        AngularFireModule.initializeApp(environment.firebase),\n        AngularFirestoreModule,\n        AngularFireAuthModule,\n        AngularFireFunctionsModule,\n        MatTabsModule,\n        MatDialogModule,\n        MatCardModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatOptionModule,\n        MatSlideToggleModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        MatProgressSpinnerModule,\n        MatTableModule,\n        MatExpansionModule\n    ],\n    providers: [\n        { provide: USE_AUTH_EMULATOR, useValue: environment.useEmulators ? ['localhost', 9099] : undefined },\n        { provide: USE_FIRESTORE_EMULATOR, useValue: environment.useEmulators ? ['localhost', 8080] : undefined },\n        { provide: USE_FUNCTIONS_EMULATOR, useValue: environment.useEmulators ? ['localhost', 5001] : undefined },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "AthleteComponent"
                        },
                        {
                            "name": "AthletesCardListComponent"
                        },
                        {
                            "name": "CreateAthleteComponent"
                        },
                        {
                            "name": "CreateMeetComponent"
                        },
                        {
                            "name": "CreateResultComponent"
                        },
                        {
                            "name": "EditAthleteDialogComponent"
                        },
                        {
                            "name": "EditMeetDialogComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "MeetsCardListComponent"
                        },
                        {
                            "name": "MeetsComponent"
                        },
                        {
                            "name": "SeasonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-2085430e018cec8b7178b24e9a0e41f6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { CreateAthleteComponent } from './create-athlete/create-athlete.component';\nimport { LoginComponent } from './login/login.component';\nimport { AthleteComponent } from './athlete/athlete.component';\nimport { AthleteResolver } from './services/athlete.resolver';\nimport { MeetsComponent } from './meets/meets.component';\nimport { CreateMeetComponent } from './create-meet/create-meet.component';\nimport { CreateResultComponent } from './create-result/create-result.component';\nimport { SeasonComponent } from './season/season.component';\nimport { GlobalSettings } from './global-settings';\nimport { SeasonResolver } from './services/season.resolver';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HomeComponent,\n    },\n    {\n        path: 'create-athlete',\n        component: CreateAthleteComponent,\n    },\n    {\n        path: 'create-meet',\n        component: CreateMeetComponent,\n    },\n    {\n        path: 'create-result/:id',\n        component: CreateResultComponent,\n    },\n    {\n        path: 'meets',\n        component: MeetsComponent,\n    },\n    {\n        path: `seasons/:seasonYear`,\n        component: SeasonComponent,\n        resolve: {\n            season: SeasonResolver,\n        },\n    },\n    {\n        path: 'athletes/:profileUrl',\n        component: AthleteComponent,\n        resolve: {\n            athlete: AthleteResolver,\n        },\n    },\n    {\n        path: 'login',\n        component: LoginComponent,\n    },\n    {\n        path: '**',\n        redirectTo: '/',\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  useEmulators: true,\n  firebase: {\n    apiKey: 'AIzaSyBnCEFqnF15WOwueCrsEUBfd8gACOTkmOg',\n    authDomain: 'xc-roster-manager.firebaseapp.com',\n    databaseURL: 'https://xc-roster-manager.firebaseio.com',\n    projectId: 'xc-roster-manager',\n    storageBucket: 'xc-roster-manager.appspot.com',\n    messagingSenderId: '136786443589',\n    appId: '1:136786443589:web:f1ad366e45775bed0d922c',\n    measurementId: 'G-VX8R78XYDQ'\n  }\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "convertSnaps",
                "file": "src/app/services/db.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "results",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "results",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  useEmulators: true,\n  firebase: {\n    apiKey: 'AIzaSyBnCEFqnF15WOwueCrsEUBfd8gACOTkmOg',\n    authDomain: 'xc-roster-manager.firebaseapp.com',\n    databaseURL: 'https://xc-roster-manager.firebaseio.com',\n    projectId: 'xc-roster-manager',\n    storageBucket: 'xc-roster-manager.appspot.com',\n    messagingSenderId: '136786443589',\n    appId: '1:136786443589:web:f1ad366e45775bed0d922c',\n    measurementId: 'G-VX8R78XYDQ'\n  }\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/services/db.utils.ts": [
                {
                    "name": "convertSnaps",
                    "file": "src/app/services/db.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "results",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "results",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/athlete/athlete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AthleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/athletes-card-list/athletes-card-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AthletesCardListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/create-athlete/create-athlete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAthleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/create-meet/create-meet.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateMeetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/create-result/create-result.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateResultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/edit-athlete-dialog/edit-athlete-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditAthleteDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/edit-meet-dialog/edit-meet-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditMeetDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/global-settings.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GlobalSettings",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/meets-card-list/meets-card-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MeetsCardListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/meets/meets.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MeetsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/athlete.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Athlete",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/models/meet-result.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MeetResult",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/meet.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Meet",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/models/schedule.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "scheduledMeet",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/season.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Season",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/season/season.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeasonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/athlete.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AthleteResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/athletes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AthletesService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/db.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "convertSnaps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/meets.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MeetsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/season.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "SeasonResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/seasons.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SeasonsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}